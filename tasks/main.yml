- name: Ensure docke volume mapping host directories exist
  file:
    state: directory
    path: "{{ item | regex_replace('^(?P<host>.+):(?P<container>.+):(?P<mode>.+)', '\\g<host>') }}"
  with_items:
    - "{{ docker_container_directory_volumes }}"
  tags:
    - install
    - upgrade


- name: Ensure docker volume mapping host file directories exist
  file:
    state: directory
    path: "{{ item | regex_replace('^(?P<host>.+):(?P<container>.+):(?P<mode>.+)', '\\g<host>') | dirname }}"
  with_items:
    - "{{ docker_container_file_volumes }}"
  tags:
    - install
    - upgrade


- name: Copy docker volume mapping host file
  template:
    src="{{ docker_container_template_path }}{{ item | regex_replace('^(?P<host>.+):(?P<container>.+):(?P<mode>.+)', '\\g<host>') | basename }}.j2"
    dest="{{ item | regex_replace('^(?P<host>.+):(?P<container>.+):(?P<mode>.+)', '\\g<host>') }}"
    mode='0644'
  with_items:
    - "{{ docker_container_file_volumes }}"
  tags:
    - install
    - upgrade


- name: login to registry {{ docker_registry | default("docker.io") }}
  docker_login:
    registry: "{{ docker_registry }}"
    username: "{{ docker_registry_username }}"
    password: "{{ docker_registry_password }}"
    email: "{{ docker_registry_email }}"
  when: docker_registry_login
  tags:
    - install
    - upgrade


- name: Remove existing {{ docker_container_name }} container
  docker_container:
    image: "{{ docker_container_image }}"
    name: "{{ docker_container_name }}"
    state: absent
  ignore_errors: yes
  tags:
    - install
    - upgrade


- name: Run docker {{ docker_container_image|default("") }} with {{ docker_container_command|default("") }}
  docker_container:
    user: "{{ docker_user }}"
    env: "{{ docker_container_env }}"
    command: "{{ docker_container_command }}"
    exposed_ports: "{{ docker_container_expose }}"
    image: "{{ docker_container_image }}"
    name: "{{ docker_container_name }}"
    published_ports: "{{ docker_container_ports }}"
    links: "{{ docker_container_links }}"
    network_mode: "{{ docker_container_network_mode }}"
    volumes: "{{ docker_container_volumes }}"
    memory: "{{ docker_container_memory_limit }}"
    log_driver: "{{ docker_container_log_driver }}"
    log_opt: "{{ docker_container_log_opt }}"
    pull: "{{ docker_container_pull_image }}"
    restart_policy: always
  environment: "{{ ansible_command_environment }}"
  when: docker_container_command is defined
  tags:
    - install
    - upgrade

- name: Run docker {{ docker_container_image }}
  docker_container:
    docker_user: "{{ docker_user }}"
    env: "{{ docker_container_env }}"
    exposed_ports: "{{ docker_container_expose }}"
    image: "{{ docker_container_image }}"
    name: "{{ docker_container_name }}"
    published_ports: "{{ docker_container_ports }}"
    links: "{{ docker_container_links }}"
    volumes: "{{ docker_container_volumes }}"
    memory: "{{ docker_container_memory_limit }}"
    log_driver: "{{ docker_container_log_driver }}"
    network_mode: "{{ docker_container_network_mode }}"
    log_opt: "{{ docker_container_log_opt }}"
    pull: "{{ docker_container_pull_image }}"
    restart_policy: always
  environment: "{{ ansible_command_environment }}"
  when: docker_container_command is undefined
  tags:
    - install
    - upgrade
    
  
- name: Cleanup unused docker resources
  shell: "docker system prune -f"
  ignore_errors: True
  tags:
    - install
    - upgrade
